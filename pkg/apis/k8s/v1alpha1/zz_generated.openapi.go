// +build !ignore_autogenerated

// Copyright 2019 The Secreter Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	"github.com/go-openapi/spec"
	"k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./pkg/apis/k8s/v1alpha1.AWSCredentials":             schema_pkg_apis_k8s_v1alpha1_AWSCredentials(ref),
		"./pkg/apis/k8s/v1alpha1.AWSKMS":                     schema_pkg_apis_k8s_v1alpha1_AWSKMS(ref),
		"./pkg/apis/k8s/v1alpha1.Curve25519":                 schema_pkg_apis_k8s_v1alpha1_Curve25519(ref),
		"./pkg/apis/k8s/v1alpha1.EncryptedSecret":            schema_pkg_apis_k8s_v1alpha1_EncryptedSecret(ref),
		"./pkg/apis/k8s/v1alpha1.EncryptedSecretList":        schema_pkg_apis_k8s_v1alpha1_EncryptedSecretList(ref),
		"./pkg/apis/k8s/v1alpha1.EncryptedSecretStatus":      schema_pkg_apis_k8s_v1alpha1_EncryptedSecretStatus(ref),
		"./pkg/apis/k8s/v1alpha1.EncryptionConfigRef":        schema_pkg_apis_k8s_v1alpha1_EncryptionConfigRef(ref),
		"./pkg/apis/k8s/v1alpha1.GCPKMS":                     schema_pkg_apis_k8s_v1alpha1_GCPKMS(ref),
		"./pkg/apis/k8s/v1alpha1.SecretEncryptionConfig":     schema_pkg_apis_k8s_v1alpha1_SecretEncryptionConfig(ref),
		"./pkg/apis/k8s/v1alpha1.SecretEncryptionConfigList": schema_pkg_apis_k8s_v1alpha1_SecretEncryptionConfigList(ref),
		"./pkg/apis/k8s/v1alpha1.SecretEncryptionProvider":   schema_pkg_apis_k8s_v1alpha1_SecretEncryptionProvider(ref),
		"./pkg/apis/k8s/v1alpha1.SecretEncryptionStatus":     schema_pkg_apis_k8s_v1alpha1_SecretEncryptionStatus(ref),
		"./pkg/apis/k8s/v1alpha1.SecretKeySelector":          schema_pkg_apis_k8s_v1alpha1_SecretKeySelector(ref),
	}
}

func schema_pkg_apis_k8s_v1alpha1_AWSCredentials(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AWSCredentials defines a reference to the AWS Access key ID and Secret Access Key in a Secret collocated in the same namespace",
				Properties: map[string]spec.Schema{
					"accessKeyID": {
						SchemaProps: spec.SchemaProps{
							Description: "AWS Access key ID",
							Ref:         ref("./pkg/apis/k8s/v1alpha1.SecretKeySelector"),
						},
					},
					"secretAccessKey": {
						SchemaProps: spec.SchemaProps{
							Description: "AWS Secret Access Key",
							Ref:         ref("./pkg/apis/k8s/v1alpha1.SecretKeySelector"),
						},
					},
				},
				Required: []string{"accessKeyID", "secretAccessKey"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/k8s/v1alpha1.SecretKeySelector"},
	}
}

func schema_pkg_apis_k8s_v1alpha1_AWSKMS(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AWSKMS defines all the parameters needed for encryption via AWS KMS.",
				Properties: map[string]spec.Schema{
					"keyID": {
						SchemaProps: spec.SchemaProps{
							Description: "A unique identifier for the customer master key (CMK).\n\nTo specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with \"alias/\". To specify a CMK in a different AWS account, you must use the key ARN or alias ARN.\n\nFor example:\n\n   * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\n   * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\n   * Alias name: alias/ExampleAlias\n\n   * Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias\n\nTo get the key ID and key ARN for a CMK, use ListKeys or DescribeKey. To get the alias name and alias ARN, use ListAliases.\n\nKeyId is a required field",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "The region to send requests to. This parameter is required and must be configured globally or on a per-client basis unless otherwise noted. A full list of regions is found in the \"Regions and Endpoints\" document.\n\nSee http://docs.aws.amazon.com/general/latest/gr/rande.html for AWS Regions and Endpoints.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"credentials": {
						SchemaProps: spec.SchemaProps{
							Description: "List of references to the AWS Access key IDs and Secret Access Keys",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/k8s/v1alpha1.AWSCredentials"),
									},
								},
							},
						},
					},
				},
				Required: []string{"keyID", "credentials"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/k8s/v1alpha1.AWSCredentials"},
	}
}

func schema_pkg_apis_k8s_v1alpha1_Curve25519(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Curve25519 represents a Curve25519 keyring.",
				Properties: map[string]spec.Schema{
					"keyStore": {
						SchemaProps: spec.SchemaProps{
							Description: "Reference to a secret containing a key store with Curve25519 key pairs",
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"rotationSchedule": {
						SchemaProps: spec.SchemaProps{
							Description: "Key rotation schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"keyStore"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_pkg_apis_k8s_v1alpha1_EncryptedSecret(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EncryptedSecret is the Schema for the encryptedsecrets API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"data": {
						SchemaProps: spec.SchemaProps{
							Description: "Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "byte",
									},
								},
							},
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Used to facilitate programmatic handling of secret data.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"encryptionConfigRef": {
						SchemaProps: spec.SchemaProps{
							Description: "EncryptionConfigRef holds a reference to the SecretEncryptionConfig",
							Ref:         ref("./pkg/apis/k8s/v1alpha1.EncryptionConfigRef"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/k8s/v1alpha1.EncryptedSecretStatus"),
						},
					},
				},
				Required: []string{"encryptionConfigRef"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/k8s/v1alpha1.EncryptedSecretStatus", "./pkg/apis/k8s/v1alpha1.EncryptionConfigRef", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_k8s_v1alpha1_EncryptedSecretList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EncryptedSecretList contains a list of EncryptedSecrets",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/k8s/v1alpha1.EncryptedSecret"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/k8s/v1alpha1.EncryptedSecret", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_k8s_v1alpha1_EncryptedSecretStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EncryptedSecretStatus defines the observed state of EncryptedSecret",
				Properties: map[string]spec.Schema{
					"decrypted": {
						SchemaProps: spec.SchemaProps{
							Description: "Decrypted is set to true once the Secret is fully decrypted and created.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"failedToDecrypt": {
						SchemaProps: spec.SchemaProps{
							Description: "FailedToDecrypt holds the map of Secret.Data keys which could not be decrypted. Since different keys can be encrypted using different providers, failing to decrypt a single value should not block creating the decrypted Secret resource. Thus every EncryptedSecret is decrypted and created on the best effort basis.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_k8s_v1alpha1_EncryptionConfigRef(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EncryptionConfigRef contains information that points to the SecretEncryptionConfig being used for encryption/decryption",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of SecretEncryptionConfig being referenced",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_k8s_v1alpha1_GCPKMS(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GCPKMS defines all the parameters needed for encryption via GCP KMS.",
				Properties: map[string]spec.Schema{
					"projectID": {
						SchemaProps: spec.SchemaProps{
							Description: "GCP project ID, see https://cloud.google.com/kms/docs/object-hierarchy#project",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"locationID": {
						SchemaProps: spec.SchemaProps{
							Description: "KMS location ID, see https://cloud.google.com/kms/docs/object-hierarchy#location",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"keyRingID": {
						SchemaProps: spec.SchemaProps{
							Description: "Key ring resource ID, see https://cloud.google.com/kms/docs/object-hierarchy#key_ring",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cryptoKeyID": {
						SchemaProps: spec.SchemaProps{
							Description: "Key resource ID, see https://cloud.google.com/kms/docs/object-hierarchy#key",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cryptoKeyVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "Key version resource ID (needed for asymmetric decryption), see https://cloud.google.com/kms/docs/object-hierarchy#key_version",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"credentials": {
						SchemaProps: spec.SchemaProps{
							Description: "List of references to keys of Secrets containing GCP credential files, see https://cloud.google.com/iam/docs/creating-managing-service-account-keys",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/k8s/v1alpha1.SecretKeySelector"),
									},
								},
							},
						},
					},
				},
				Required: []string{"projectID", "locationID", "keyRingID", "cryptoKeyID", "credentials"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/k8s/v1alpha1.SecretKeySelector"},
	}
}

func schema_pkg_apis_k8s_v1alpha1_SecretEncryptionConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SecretEncryptionConfig is the Schema for the secretencryptionconfigs API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"providers": {
						SchemaProps: spec.SchemaProps{
							Description: "Providers is the list of encryption providers to be used. The first one is the primary provider that will be used for encryption.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/k8s/v1alpha1.SecretEncryptionProvider"),
									},
								},
							},
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status contains the information about public keys of the primary encryption provider (if applicable), observed state of the configuration, etc.",
							Ref:         ref("./pkg/apis/k8s/v1alpha1.SecretEncryptionStatus"),
						},
					},
				},
				Required: []string{"providers"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/k8s/v1alpha1.SecretEncryptionProvider", "./pkg/apis/k8s/v1alpha1.SecretEncryptionStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_k8s_v1alpha1_SecretEncryptionConfigList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SecretEncryptionConfigList contains a list of SecretEncryptionConfigs",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/k8s/v1alpha1.SecretEncryptionConfig"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/k8s/v1alpha1.SecretEncryptionConfig", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_k8s_v1alpha1_SecretEncryptionProvider(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SecretEncryptionProvider defines the desired state of SecretEncryptionConfig.",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the provider to be used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"curve25519": {
						SchemaProps: spec.SchemaProps{
							Description: "Curve25519 defines the configuration of the local Curve25519 provider",
							Ref:         ref("./pkg/apis/k8s/v1alpha1.Curve25519"),
						},
					},
					"gcpkms": {
						SchemaProps: spec.SchemaProps{
							Description: "GCPKMS defines the configuration of the GCP KMS provider",
							Ref:         ref("./pkg/apis/k8s/v1alpha1.GCPKMS"),
						},
					},
					"awskms": {
						SchemaProps: spec.SchemaProps{
							Description: "AWSKMS defines the configuration of the AWS KMS provider",
							Ref:         ref("./pkg/apis/k8s/v1alpha1.AWSKMS"),
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/k8s/v1alpha1.AWSKMS", "./pkg/apis/k8s/v1alpha1.Curve25519", "./pkg/apis/k8s/v1alpha1.GCPKMS"},
	}
}

func schema_pkg_apis_k8s_v1alpha1_SecretEncryptionStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SecretEncryptionStatus defines the observed state of SecretEncryptionConfig.",
				Properties: map[string]spec.Schema{
					"publicKey": {
						SchemaProps: spec.SchemaProps{
							Description: "PublicKey is the current primary PublicKey used for encryption",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_k8s_v1alpha1_SecretKeySelector(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SecretKeySelector defines a reference to the specific key in a Secret collocated in the same namespace",
				Properties: map[string]spec.Schema{
					"secretKeyRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Selects a key of a Secret in the same namespace",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
				},
				Required: []string{"secretKeyRef"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.SecretKeySelector"},
	}
}
